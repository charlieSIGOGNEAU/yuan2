import { uiManager } from '../ui/UIManager.js';
import { gameState } from '../gameState.js';
import { biddingPhase } from './biddingPhase.js';
import * as THREE from 'three';

export const simultaneousPlayPhase = {
    // Stockage du cercle actuel (un seul √† la fois)
    currentCircle: null, // { circle: THREE.Mesh, territory: Territory }
    
    simultaneousPlayPhase(gameBoard) {
        console.log('üéØ Ex√©cution de la phase de simultaneous_play');

        // R√©cup√©rer le clan du joueur actuel
        gameState.game.setMyClanFromVictoryBidding(gameState.myGameUserId);
        
        // Afficher la barre d'information sp√©cifique √† cette phase
        uiManager.showSimultaneousPlayInfoBar();
        
        // Afficher la barre d'action √† 6 cases
        uiManager.showPlayerActionBar();
        
        // Activer la d√©tection de clic sur les territoires
        this.setupTerritoryClickDetection(gameBoard);
        
        // V√©rifier s'il n'y a pas d'actions
        if (!gameState.game.actions || gameState.game.actions.length === 0) {
            console.log('üéØ Aucune action trouv√©e, traitement des biddings victorieux');
            this.processVictoryBiddings(gameBoard);
        }
    },

    // Configuration de la d√©tection de clic sur les territoires
    setupTerritoryClickDetection(gameBoard) {
        console.log('üéØ Configuration de la d√©tection de clic sur les territoires');
        
        // D√©finir le callback pour les clics
        const handleTerritoryClick = (hexCoords, worldPoint) => {
            console.log(`üéØ Clic d√©tect√© √† (${hexCoords.q}, ${hexCoords.r})`);
            
            // Trouver le territoire √† cette position
            const territory = gameState.game.territories.find(t => 
                t.position.q === hexCoords.q && t.position.r === hexCoords.r
            );
            
            if (!territory) {
                console.log('‚ö†Ô∏è Aucun territoire trouv√© √† cette position');
                return;
            }
            
            console.log(`üìç Territoire trouv√©: type=${territory.type}, clan_id=${territory.clan_id}`);
            
            // V√©rifier si le territoire est du bon type
            const validTypes = ['rice', 'plain', 'mine', 'forest'];
            
            if (validTypes.includes(territory.type)) {
                console.log(`‚úÖ Territoire valide: ${territory.type}`);
                
                // Supprimer l'ancien cercle s'il existe
                if (this.currentCircle) {
                    console.log('üóëÔ∏è Suppression de l\'ancien cercle');
                    this.removeCurrentCircle(gameBoard);
                }
                
                // Cr√©er le nouveau cercle
                console.log('üîµ Cr√©ation d\'un nouveau cercle');
                this.createTerritoryCircle(gameBoard, territory);
                
            } else {
                console.log(`‚ùå Territoire invalide: type=${territory.type}`);
            }
        };

        // Utiliser le syst√®me de callback de GameBoard3D
        gameBoard.detectClickOnly(handleTerritoryClick);
        
        // Stocker la r√©f√©rence pour pouvoir la supprimer plus tard
        this.clickHandler = handleTerritoryClick;
        this.currentGameBoard = gameBoard;
        
        console.log('‚úÖ D√©tection de clic sur les territoires activ√©e');
    },

    // Cr√©er un cercle sur un territoire
    createTerritoryCircle(gameBoard, territory) {
        if (!gameBoard) return;
        
        console.log(`üîµ Cr√©ation d'un cercle pour le territoire ${territory.type} √† (${territory.position.q}, ${territory.position.r})`);
        
        const circle = this.createCircle(gameBoard, territory.position);
        
        // Stocker le cercle avec son territoire associ√©
        this.currentCircle = {
            circle: circle,
            territory: territory
        };
        
        console.log(`‚úÖ Cercle cr√©√© pour le territoire ${territory.type}`);
    },

    // Cr√©er un cercle sur une position donn√©e (r√©utilis√© de biddingPhase)
    createCircle(gameBoard, position) {
        const textureLoader = new THREE.TextureLoader();
        const geometry = new THREE.PlaneGeometry(1, 1);
        
        // Mat√©riau avec transparence
        const material = new THREE.MeshBasicMaterial({
            transparent: true,
            opacity: 0.8,
            side: THREE.DoubleSide,
            color: 0xffffff
        });
        
        const circle = new THREE.Mesh(geometry, material);
        
        // Charger la texture cercle
        textureLoader.load(
            './images/cercle.webp',
            (texture) => {
                texture.colorSpace = THREE.SRGBColorSpace;
                material.map = texture;
                material.needsUpdate = true;
            },
            undefined,
            (error) => console.warn('‚ö†Ô∏è Erreur chargement texture cercle:', error)
        );
        
        // Convertir position hexagonale en cart√©sienne
        const pos = gameBoard.hexToCartesian(position);
        circle.position.set(pos.x, 0.1, pos.z);
        circle.rotation.x = -Math.PI / 2; // Plat sur le sol
        
        // Ajouter au workplane
        gameBoard.workplane.add(circle);
        
        console.log(`üîµ Cercle cr√©√© √† (${position.q}, ${position.r})`);
        return circle;
    },

    // Supprimer le cercle actuel
    removeCurrentCircle(gameBoard) {
        if (!gameBoard || !this.currentCircle) return;
        
        gameBoard.workplane.remove(this.currentCircle.circle);
        
        // Lib√©rer les ressources
        if (this.currentCircle.circle.geometry) this.currentCircle.circle.geometry.dispose();
        if (this.currentCircle.circle.material) this.currentCircle.circle.material.dispose();
        
        console.log(`üóëÔ∏è Cercle supprim√© pour le territoire ${this.currentCircle.territory.type}`);
        
        this.currentCircle = null;
    },

    // Obtenir le territoire du cercle actuel
    getCurrentTerritory() {
        return this.currentCircle ? this.currentCircle.territory : null;
    },

    // Nettoyer les ressources de la phase
    cleanupPhase() {
        if (this.currentGameBoard) {
            this.currentGameBoard.disableClickCallback();
            this.currentGameBoard = null;
        }
        this.clickHandler = null;
        
        // Supprimer le cercle actuel
        if (this.currentCircle) {
            this.removeCurrentCircle(this.currentGameBoard);
        }
    },

    async processVictoryBiddings(gameBoard) {
        console.log('üèÜ Traitement des biddings victorieux');
        
        // 1. Supprimer les cercles de bidding
        biddingPhase.removeAllCircles(gameBoard);
        
        // 2. R√©cup√©rer tous les biddings victorieux
        const victoryBiddings = gameState.game.biddings.filter(bidding => bidding.victory === true);
        console.log(`üèÜ ${victoryBiddings.length} biddings victorieux trouv√©s`);
        
        for (const bidding of victoryBiddings) {
            console.log(`üèÜ Traitement du bidding victorieux: clan_id=${bidding.clan_id}, game_user_id=${bidding.game_user_id}`);
            
            // 3. R√©cup√©rer le clan correspondant
            const clan = gameState.game.clans.find(c => c.id === bidding.clan_id);
            if (!clan) {
                console.warn(`‚ö†Ô∏è Clan non trouv√© pour clan_id=${bidding.clan_id}`);
                continue;
            }
            
            console.log(`üé® Clan trouv√©: ${clan.name} avec couleur ${clan.color}`);
            
            // 4. Mettre √† jour available_chao du clan
            clan.available_chao = 6 - bidding.chao;
            console.log(`üí∞ Clan ${clan.name}: available_chao mis √† jour √† ${clan.available_chao} (6 - ${bidding.chao})`);
            
            // 5. R√©cup√©rer le territoire correspondant √† la position du clan
            const territory = gameState.game.territories.find(t => 
                t.position.q === clan.start_q && 
                t.position.r === clan.start_r
            );
            
            if (!territory) {
                console.warn(`‚ö†Ô∏è Territoire non trouv√© pour position (${clan.start_q}, ${clan.start_r})`);
                continue;
            }
            
            console.log(`üìç Territoire trouv√© √† (${territory.position.q}, ${territory.position.r})`);
            
            // 6. Mettre √† jour le territoire
            territory.clan_id = clan.id;
            territory.construction_type = 'ville';
            territory.user_id = bidding.game_user_id;
            
            // 7. Cr√©er la construction si gameBoard disponible
            if (gameBoard?.meepleManager) {
                console.log(`üèóÔ∏è Cr√©ation de la ville pour le clan ${clan.name}`);
                await territory.createConstruction(gameBoard, gameBoard.meepleManager);
            } else {
                console.warn(`‚ö†Ô∏è gameBoard ou meepleManager non disponible pour cr√©er la ville`);
            }
        }
        
        console.log('‚úÖ Traitement des biddings victorieux termin√©');
        
        // Incr√©menter le tour de jeu simultan√©
        gameState.game.simultaneous_play_turn = 1;
        
        // Mettre √† jour toutes les cases de la barre d'information
        uiManager.updateSimultaneousPlayInfoBar();
    }
}